The typical approach to mapping the relationship between 'person' and 'group' is a many-to-many. In a standard implementation, users have multiple roles, and roles are shared by multiple users. In a group implementation, users have multiple groups, and groups are shared by multiple users. For the same reason we would use a join class between 'person' and 'authority', we should use one between 'person' and 'group'. Please note that when using groups, there should not be a join class between 'person' and 'authority', since 'group' resides between the two.

If you run the [s2-quickstart-groups|Scripts] script, this class will be generated for you, so you don't need to deal with the details of mapping it. Assuming you choose @com.mycompany.myapp@ as your package, and @User@ and @Group@ as your class names, you'll generate this class:

{code}
package com.mycompany.myapp

import org.apache.commons.lang.builder.HashCodeBuilder

class UserGroup implements Serializable {

	private static final long serialVersionUID = 1

	User user
	Group group

	boolean equals(other) {
		if (!(other instanceof UserGroup)) {
			return false
		}

		other.user?.id == user?.id &&
				other.group?.id == group?.id
	}

	int hashCode() {
		def builder = new HashCodeBuilder()
		if (user) builder.append(user.id)
		if (group) builder.append(group.id)
		builder.toHashCode()
	}

	static UserGroup get(long userId, long groupId) {
		UserGroup.where {
			user == User.load(userId) &&
					group == Group.load(groupId)
		}.get()
	}

	static UserGroup create(User user, Group group, boolean flush = false) {
		new UserGroup(user: user, group: group).save(flush: flush, insert: true)
	}

	static boolean remove(User u, Group g) {
		int rowCount = UserGroup.where {
			user == User.load(u.id) &&
					group == Group.load(g.id)
		}.deleteAll()

		rowCount > 0
	}

	static void removeAll(User u) {
		UserGroup.where {
			user == User.load(u.id)
		}.deleteAll()
	}

	static void removeAll(Group g) {
		UserGroup.where {
			group == Group.load(g.id)
		}.deleteAll()
	}

	static mapping = {
		id composite: ['group', 'user']
		version false
	}
}
{code}