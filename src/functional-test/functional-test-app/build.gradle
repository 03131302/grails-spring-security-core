buildscript {
	ext {
		grailsVersion = project.grailsVersion
	}
	repositories {
		mavenLocal()
		maven { url 'https://repo.grails.org/grails/core' }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
		classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:2.5.0'
	}
}

plugins {
	id 'io.spring.dependency-management' version '0.5.2.RELEASE'
}

version '0.1'
group 'functional.test.app'

apply plugin: 'spring-boot'
apply plugin: 'asset-pipeline'
apply plugin: 'org.grails.grails-web'

ext {
	grailsVersion = project.grailsVersion
	gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
	mavenLocal()
	maven { url 'https://repo.grails.org/grails/core' }
}

dependencyManagement {
	imports {
		mavenBom "org.grails:grails-bom:$grailsVersion"
	}
	applyMavenExclusions false
}

dependencies {

	compile 'org.grails.plugins:cache'
	compile 'org.grails.plugins:hibernate'
	compile 'org.grails:grails-dependencies'
	compile 'org.grails:grails-web-boot'
	compile 'org.hibernate:hibernate-ehcache'
	compile 'org.springframework.boot:spring-boot-autoconfigure'
	compile 'org.springframework.boot:spring-boot-starter-logging'
	compile 'org.springframework.boot:spring-boot-starter-tomcat'

	String pluginVersion = file('../../../version.txt').text.trim()
	compile 'org.grails.plugins:spring-security-core:' + pluginVersion
	compile 'org.grails.plugins:spring-security-appinfo:3.0.0.M1'

	runtime 'org.grails.plugins:asset-pipeline'

	String seleniumVersion = '2.47.1'
	testCompile 'org.grails:grails-plugin-testing'
	testCompile 'org.grails.plugins:geb'
//	testCompile 'com.github.detro:phantomjsdriver:1.2.0'
	testCompile 'com.codeborne:phantomjsdriver:1.2.1' // TODO switch back to com.github.detro:phantomjsdriver when this
	                                                  // issue is resolved: https://github.com/detro/ghostdriver/issues/397

	['chrome', 'firefox', 'htmlunit'].each { String name ->
		testCompile "org.seleniumhq.selenium:selenium-${name}-driver:$seleniumVersion"
	}

   testCompile 'org.gebish:geb-core:0.12.1'

	console 'org.grails:grails-console'
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleWrapperVersion
}

integrationTest {
	def file = new File('testconfig')
	String testconfig = file.exists() ? file.text.trim().toLowerCase() : 'annotation'
	def tests
	switch (testconfig) {
		case 'annotation': tests = ['AnnotationSecurity', 'InheritanceSecurity', 'NamespaceSecurity', 'Role', 'User']; break
		case 'basic':      tests = ['BasicAuthSecurity', 'Role', 'User']; break
		case 'bcrypt':     tests = ['BCrypt']; break
		case 'misc':       tests = ['Disable', 'Misc']; break
		case 'requestmap': tests = ['Requestmap', 'RequestmapSecurity', 'Role', 'User']; break
		case 'static':     tests = ['Role', 'StaticSecurity', 'User']; break
		default: throw new GradleException('File testconfig must exist and contain one of annotation, basic, bcrypt, misc, requestmap, or static')
	}

	tests.each { include "**/${it}Spec.class" }

	doFirst {
		logger.lifecycle "\n - Running test(s) $tests for configuration '$testconfig'"
	}

	beforeTest { descriptor -> logger.lifecycle " -- $descriptor" }
}
