package ${packageName}

import grails.plugin.springsecurity.SpringSecurityService
import org.grails.datastore.mapping.core.Datastore
import org.grails.datastore.mapping.engine.event.AbstractPersistenceEvent
import org.grails.datastore.mapping.engine.event.AbstractPersistenceEventListener
import org.grails.datastore.mapping.engine.event.EventType
import org.grails.datastore.mapping.engine.event.PreInsertEvent
import org.grails.datastore.mapping.engine.event.PreUpdateEvent
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.context.ApplicationEvent

class ${userClassName}PasswordEncoderListener extends AbstractPersistenceEventListener {

    @Autowired
    SpringSecurityService springSecurityService

    ${userClassName}PasswordEncoderListener(final Datastore datastore) {
        super(datastore)
    }

    @Override
    protected void onPersistenceEvent(AbstractPersistenceEvent event) {
        if (event.entityObject instanceof ${userClassName}) {
            ${userClassName} u = (event.entityObject as ${userClassName})
            if (u.password && (event.eventType == EventType.PreInsert || (event.eventType == EventType.PreUpdate && u.isDirty('password')))) {
                event.getEntityAccess().setProperty("password", encodePassword(u))
            }
        }
    }

    @Override
    boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {
        eventType == PreUpdateEvent || eventType == PreInsertEvent
    }

    private String encodePassword(${userClassName} u) {
        springSecurityService?.passwordEncoder ? springSecurityService.encodePassword(u.password, salt(u)) : u.password
    }

    private def salt(${userClassName} u) {
        if ( !springSecurityService ) {
            return null
        }
        def algorithm = springSecurityService.grailsApplication.config.grails.plugin.springsecurity.password.algorithm
        if ( algorithm == 'bcrypt' || algorithm == 'pbkdf2' ) {
            return null
        }

        def reflectionSaltProperty = springSecurityService.grailsApplication.config.grails.plugin.springsecurity.dao.reflectionSaltSourceProperty
        if ( reflectionSaltProperty ) {
            return u.getProperty(reflectionSaltProperty)
        }
        null
    }
}
